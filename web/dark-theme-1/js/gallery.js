const DEFAULT_COLLECTIONS_SOURCES = [
  "../data/gallery/collections.json",
  "/site/data/gallery/collections.json",
];

const DEFAULT_SITE_CONFIG_SOURCES = ["../config/site.json", "/site/config/site.json"];

const GLOBAL_DATA = window.__SMILE_DATA__ || {};

const COLLECTIONS_SOURCES = resolveSources(
  GLOBAL_DATA.gallery?.collections,
  DEFAULT_COLLECTIONS_SOURCES
);

const SITE_CONFIG_SOURCES = resolveSources(
  GLOBAL_DATA.siteConfig,
  DEFAULT_SITE_CONFIG_SOURCES
);

const COLLECTION_ROOTS = deriveRoots(COLLECTIONS_SOURCES, "collections.json");

function resolveSources(preferred, fallback) {
  if (Array.isArray(preferred) && preferred.length) {
    return preferred.filter(Boolean);
  }
  if (typeof preferred === "string" && preferred.trim()) {
    return [preferred.trim()];
  }
  return fallback.slice();
}

function deriveRoots(sources, filename) {
  if (!Array.isArray(sources) || !sources.length) {
    return [];
  }
  return sources
    .map((source) => {
      if (typeof source !== "string") return null;
      const clean = source.split("?")[0];
      const index = clean.lastIndexOf(filename);
      if (index >= 0) {
        return clean.slice(0, index);
      }
      if (clean.endsWith("/")) {
        return clean;
      }
      const segments = clean.split("/");
      segments.pop();
      return `${segments.join("/")}/`;
    })
    .filter(Boolean)
    .map(ensureTrailingSlash);
}

function ensureTrailingSlash(value) {
  if (typeof value !== "string" || !value) {
    return value;
  }
  return value.endsWith("/") ? value : `${value}/`;
}

const state = {
  collections: [],
  currentCollection: null,
  items: [],
  filteredItems: [],
  renderedCount: 0,
  query: "",
  sort: "newest",
  chunkSize: 24,
  observer: null,
  sentinel: null,
  dom: {},
  modal: null,
  lastFocus: null,
  activeImageId: null,
  routeListenerAttached: false,
  collectionRequestToken: 0,
  slideshow: {
    isPlaying: false,
    timer: null,
    delayMs: 3000,
    index: -1,
    loop: true,
    overlayRoot: null,
    overlayImage: null,
    overlayPauseBtn: null,
    overlayPlayBtn: null,
    overlayCloseBtn: null,
    overlayHiddenForModal: false,
    handleKey: null,
  },
};

const ROUTE_KEYS = Object.freeze({
  collection: "collection",
  image: "image",
});

let isSyncingRoute = false;

document.addEventListener("DOMContentLoaded", () => {
  initializeGallery().catch((error) => {
    console.error("[gallery] initialization failed", error);
  });
});

async function initializeGallery() {
  const main = document.getElementById("main");
  if (!main) return;

  renderLoading(main, "Loading gallery collections...");

  try {
    const [collectionsPayload, siteConfig] = await Promise.all([
      fetchFirstJson(COLLECTIONS_SOURCES),
      fetchFirstJson(SITE_CONFIG_SOURCES),
    ]);

    renderSiteChrome(siteConfig || {});

    const collections = (collectionsPayload?.collections ?? []).map(normalizeCollection);
    state.collections = collections;
    renderCollectionList(main, collections);
    await syncRouteFromLocation({ initialLoad: true });
    if (!state.routeListenerAttached) {
      window.addEventListener("popstate", () => {
        syncRouteFromLocation().catch((popError) => {
          console.error("[gallery] failed to sync on popstate", popError);
        });
      });
      state.routeListenerAttached = true;
    }
  } catch (error) {
    console.error("[gallery] failed to load collections", error);
    renderError(main, "We couldn't load the gallery right now. Please try again soon.");
  }
}

function renderCollectionList(container, collections) {
  container.innerHTML = "";

  const totalImages = collections.reduce((sum, item) => sum + (item.image_count || 0), 0);

  const hero = document.createElement("section");
  hero.className = "gallery-hero";
  hero.innerHTML = `
    <div class="gallery-hero__content">
      <span class="pill pill--light">Curated Collections</span>
      <h1 class="headline-2">Photo & Media Gallery</h1>
      <p>Explore ${collections.length} collection${collections.length === 1 ? "" : "s"} and ${totalImages} media item${totalImages === 1 ? "" : "s"} generated by the latest build.</p>
    </div>
    <div class="gallery-hero__meta" aria-live="polite">
      <span class="pill">Infinite scroll ready</span>
      <span class="pill pill--light">Searchable & sortable</span>
    </div>
  `;

  const grid = document.createElement("section");
  grid.className = "gallery-collections";
  grid.setAttribute("aria-label", "Gallery collections");

  if (!collections.length) {
    const empty = document.createElement("div");
    empty.className = "gallery-empty";
    empty.innerHTML = "<p>No collections were published in this build.</p>";
    grid.appendChild(empty);
  } else {
    collections
      .sort((a, b) => a.sort_order - b.sort_order || a.title.localeCompare(b.title))
      .forEach((collection) => {
        const card = createCollectionCard(collection);
        grid.appendChild(card);
      });
  }

  container.appendChild(hero);
  container.appendChild(grid);
}

function createCollectionCard(collection) {
  const card = document.createElement("article");
  card.className = "gallery-card";

  const button = document.createElement("button");
  button.type = "button";
  button.className = "gallery-card__cover";
  button.setAttribute("aria-labelledby", `collection-${collection.id}`);
  button.addEventListener("click", () => {
    openCollection(collection);
  });

  if (collection.cover?.thumbnail) {
    const img = document.createElement("img");
    img.src = ensureRelativeAsset(collection.cover.thumbnail);
    img.alt = collection.cover.alt || collection.cover.title || collection.title;
    img.loading = "lazy";
    button.appendChild(img);
  } else {
    button.innerHTML = `<span class="pill">No cover</span>`;
  }

  const body = document.createElement("div");
  body.className = "gallery-card__body";
  body.innerHTML = `
    <div>
      <h2 class="headline-4" id="collection-${collection.id}">${escapeHtml(collection.title)}</h2>
      ${collection.description ? `<p>${escapeHtml(collection.description)}</p>` : ""}
    </div>
    <div class="gallery-card__meta">
      <span>${collection.image_count} item${collection.image_count === 1 ? "" : "s"}</span>
      ${collection.tags.length ? `<span>#${collection.tags[0]}</span>` : ""}
    </div>
  `;

  const action = document.createElement("div");
  action.className = "gallery-card__action";
  action.innerHTML = `
    <button type="button" class="button button--primary">
      View collection
    </button>
  `;
  action.querySelector("button").addEventListener("click", () => openCollection(collection));

  card.appendChild(button);
  card.appendChild(body);
  card.appendChild(action);
  return card;
}

async function openCollection(collection, options = {}) {
  const { skipRouteUpdate = false, imageId = null } = options;
  const main = document.getElementById("main");
  if (!main) return;

  const requestToken = ++state.collectionRequestToken;

  if (state.modal) {
    closeModal({ skipRoute: true });
  }
  state.activeImageId = null;
  // Reset slideshow when switching collections
  stopSlideshow();
  state.slideshow.index = -1;

  renderLoading(main, `Loading "${collection.title}"...`);

  try {
    const records = await fetchCollectionRecords(collection);
    if (requestToken !== state.collectionRequestToken) {
      return;
    }
    state.currentCollection = collection;
    state.items = records.map(normalizeRecord);
    applyFilters({ query: "", sort: "newest" });
    renderCollectionView(main, collection);
    renderFilteredItems();

    if (!skipRouteUpdate) {
      updateRoute({ collectionId: collection.id, imageId: null });
    }

    if (imageId) {
      const target =
        state.items.find((item) => item.id === imageId) ||
        state.filteredItems.find((item) => item.id === imageId);
      if (target) {
        openModal(target, { skipRouteUpdate });
      }
    }
  } catch (error) {
    console.error("[gallery] failed to load collection", error);
    renderError(main, "This collection failed to load. Please return to collections and try again.");
  }
}

function applyFilters({ query, sort }) {
  if (typeof query === "string") {
    state.query = query.trim().toLowerCase();
  }
  if (typeof sort === "string") {
    state.sort = sort;
  }

  const queryText = state.query;
  let filtered = state.items;

  if (queryText) {
    filtered = filtered.filter((item) => item.searchText.includes(queryText));
  }

  filtered = [...filtered].sort((a, b) => {
    switch (state.sort) {
      case "oldest":
        return (a.sortDate || 0) - (b.sortDate || 0);
      case "title-asc":
        return a.title.localeCompare(b.title);
      case "title-desc":
        return b.title.localeCompare(a.title);
      case "newest":
      default:
        return (b.sortDate || 0) - (a.sortDate || 0);
    }
  });

  state.filteredItems = filtered;
  state.renderedCount = 0;
}

function renderCollectionView(main, collection) {
  main.innerHTML = "";

  const container = document.createElement("div");
  container.className = "gallery-collection-view";

  const header = document.createElement("section");
  header.className = "gallery-collection-header";
  const created = collection.created_at ? formatDate(collection.created_at) : null;
  const updated = collection.updated_at ? formatDate(collection.updated_at) : null;

  header.innerHTML = `
    <button type="button" class="button gallery-back" data-gallery-back>
      <- Back to collections
    </button>
    <div>
      <span class="pill pill--light">Collection</span>
      <h1 class="headline-3">${escapeHtml(collection.title)}</h1>
      ${collection.description ? `<p>${escapeHtml(collection.description)}</p>` : ""}
    </div>
    <div class="gallery-collection-meta">
      <span>${collection.image_count} item${collection.image_count === 1 ? "" : "s"}</span>
      ${created ? `<span>Created ${created}</span>` : ""}
      ${updated ? `<span>Updated ${updated}</span>` : ""}
    </div>
  `;

  const toolbar = document.createElement("section");
  toolbar.className = "gallery-toolbar";
  toolbar.innerHTML = `
    <div class="gallery-toolbar__group gallery-search">
      <label class="visually-hidden" for="gallery-search">Search images</label>
      <input id="gallery-search" type="search" placeholder="Search title, caption, tags, or dates..." autocomplete="off" />
    </div>
    <div class="gallery-toolbar__group">
      <label class="visually-hidden" for="gallery-sort">Sort images</label>
      <select id="gallery-sort" class="gallery-sort">
        <option value="newest">Newest first</option>
        <option value="oldest">Oldest first</option>
        <option value="title-asc">Title A - Z</option>
        <option value="title-desc">Title Z - A</option>
      </select>
      <span class="gallery-count" data-gallery-count></span>
    </div>
    <div class="gallery-toolbar__group gallery-slideshow">
      <label for="slideshow-delay" class="visually-hidden">Slideshow delay (seconds)</label>
      <input id="slideshow-delay" type="number" min="1" max="60" step="1" value="3" title="Slideshow delay (seconds)" />
      <button type="button" class="button" data-ss-play>Play</button>
      <button type="button" class="button" data-ss-pause disabled>Pause</button>
      <button type="button" class="button" data-ss-stop disabled>Stop</button>
    </div>
  `;

  const grid = document.createElement("section");
  grid.className = "gallery-grid";
  grid.setAttribute("role", "list");
  grid.id = "gallery-grid";

  const sentinel = document.createElement("div");
  sentinel.className = "gallery-sentinel";

  container.appendChild(header);
  container.appendChild(toolbar);
  container.appendChild(grid);
  container.appendChild(sentinel);
  main.appendChild(container);

  // Event wiring
  toolbar.querySelector("#gallery-search").addEventListener("input", debounce((event) => {
    applyFilters({ query: event.target.value });
    stopSlideshow();
    resetRenderedGrid();
  }, 120));

  toolbar.querySelector("#gallery-sort").addEventListener("change", (event) => {
    applyFilters({ sort: event.target.value });
    stopSlideshow();
    resetRenderedGrid();
  });

  header.querySelector("[data-gallery-back]").addEventListener("click", () => {
    returnToCollections();
  });

  state.dom = {
    grid,
    count: toolbar.querySelector("[data-gallery-count]"),
    search: toolbar.querySelector("#gallery-search"),
    sort: toolbar.querySelector("#gallery-sort"),
    ssDelay: toolbar.querySelector("#slideshow-delay"),
    ssPlay: toolbar.querySelector("[data-ss-play]"),
    ssPause: toolbar.querySelector("[data-ss-pause]"),
    ssStop: toolbar.querySelector("[data-ss-stop]"),
  };

  // Slideshow controls
  if (state.dom.ssDelay) {
    state.dom.ssDelay.value = String(Math.max(1, Math.round(state.slideshow.delayMs / 1000)));
    state.dom.ssDelay.addEventListener("change", () => {
      const secs = Math.max(1, Math.min(60, Number(state.dom.ssDelay.value) || 3));
      state.slideshow.delayMs = secs * 1000;
      state.dom.ssDelay.value = String(secs);
      if (state.slideshow.isPlaying) {
        pauseSlideshow();
        startSlideshow({ resume: true });
      }
    });
  }

  state.dom.ssPlay?.addEventListener("click", () => startSlideshow());
  state.dom.ssPause?.addEventListener("click", () => pauseSlideshow());
  state.dom.ssStop?.addEventListener("click", () => stopSlideshow());

  state.sentinel = sentinel;
  setupObserver();
}

function renderFilteredItems() {
  if (!state.dom.grid) return;

  state.dom.grid.innerHTML = "";
  state.renderedCount = 0;
  updateCount();
  renderNextChunk();
}

function renderNextChunk() {
  const start = state.renderedCount;
  const end = Math.min(start + state.chunkSize, state.filteredItems.length);

  const fragment = document.createDocumentFragment();
  for (let index = start; index < end; index += 1) {
    const record = state.filteredItems[index];
    const card = createGalleryCard(record, index);
    fragment.appendChild(card);
  }

  state.dom.grid.appendChild(fragment);
  state.renderedCount = end;

  if (state.renderedCount >= state.filteredItems.length) {
    destroyObserver();
  }
}

function createGalleryCard(record, index) {
  const article = document.createElement("article");
  article.className = "gallery-item";
  article.setAttribute("role", "listitem");
  article.tabIndex = 0;
  article.dataset.index = String(index);

  const media = document.createElement("div");
  media.className = "gallery-item__media";
  if (record.thumbnail) {
    const img = document.createElement("img");
    img.src = ensureRelativeAsset(record.thumbnail);
    img.alt = record.alt || record.title;
    img.loading = "lazy";
    media.appendChild(img);
  } else {
    media.innerHTML = `<span class="pill pill--light">No thumbnail</span>`;
  }

  const meta = document.createElement("div");
  meta.className = "gallery-item__meta";
  meta.innerHTML = `
    <h3>${escapeHtml(record.title)}</h3>
    ${record.caption ? `<p>${escapeHtml(record.caption)}</p>` : ""}
  `;

  article.appendChild(media);
  article.appendChild(meta);

  const open = () => openModal(record);
  article.addEventListener("click", open);
  article.addEventListener("keypress", (event) => {
    if (event.key === "Enter" || event.key === " ") {
      event.preventDefault();
      open();
    }
  });

  return article;
}

function updateCount() {
  if (!state.dom.count) return;
  const total = state.filteredItems.length;
  const remaining = Math.max(total - state.renderedCount, 0);
  state.dom.count.textContent = `${total} item${total === 1 ? "" : "s"} - ${remaining} remaining`;
}

function resetRenderedGrid() {
  destroyObserver();
  renderFilteredItems();
  setupObserver();
}

// --- Slideshow helpers ---
function setActiveSlideIndex(nextIndex) {
  const prev = document.querySelector('.gallery-item[aria-current="true"]');
  if (prev) prev.removeAttribute('aria-current');
  state.slideshow.index = nextIndex;
  if (nextIndex < 0) return;
  ensureItemRendered(nextIndex);
  const el = state.dom.grid?.querySelector(`.gallery-item[data-index="${nextIndex}"]`);
  if (el) {
    el.setAttribute('aria-current', 'true');
    try { el.scrollIntoView({ behavior: 'smooth', block: 'center' }); } catch {}
  }
  updateOverlayImage();
}

function ensureItemRendered(targetIndex) {
  if (!state.dom.grid) return;
  while (state.renderedCount <= targetIndex && state.renderedCount < state.filteredItems.length) {
    renderNextChunk();
  }
}

function startSlideshow(options = {}) {
  const { resume = false } = options;
  if (!state.filteredItems.length) return;
  ensureSlideshowOverlay();
  if (!resume) {
    if (state.slideshow.index < 0 || state.slideshow.index >= state.filteredItems.length) {
      setActiveSlideIndex(0);
    } else {
      setActiveSlideIndex(state.slideshow.index);
    }
  } else {
    setActiveSlideIndex(Math.max(0, state.slideshow.index));
  }
  showSlideshowOverlay();
  if (state.slideshow.timer) clearTimeout(state.slideshow.timer);
  state.slideshow.isPlaying = true;
  updateSlideshowButtons();
  scheduleNextAdvance();
}

function scheduleNextAdvance() {
  if (!state.slideshow.isPlaying) return;
  state.slideshow.timer = setTimeout(() => {
    advanceSlideshow();
  }, state.slideshow.delayMs);
}

function advanceSlideshow() {
  const next = state.slideshow.index + 1;
  if (next >= state.filteredItems.length) {
    if (state.slideshow.loop && state.filteredItems.length > 0) {
      setActiveSlideIndex(0);
    } else {
      stopSlideshow();
      return;
    }
  } else {
    setActiveSlideIndex(next);
  }
  scheduleNextAdvance();
}

function pauseSlideshow() {
  if (state.slideshow.timer) {
    clearTimeout(state.slideshow.timer);
    state.slideshow.timer = null;
  }
  state.slideshow.isPlaying = false;
  updateSlideshowButtons();
}

function stopSlideshow() {
  if (state.slideshow.timer) {
    clearTimeout(state.slideshow.timer);
    state.slideshow.timer = null;
  }
  state.slideshow.isPlaying = false;
  setActiveSlideIndex(-1);
  updateSlideshowButtons();
  removeSlideshowOverlay();
}

function updateSlideshowButtons() {
  if (!state.dom) return;
  const { ssPlay, ssPause, ssStop } = state.dom;
  if (ssPlay) ssPlay.disabled = state.slideshow.isPlaying;
  if (ssPause) ssPause.disabled = !state.slideshow.isPlaying;
  if (ssStop) ssStop.disabled = !state.slideshow.isPlaying && state.slideshow.index < 0;
  if (state.slideshow.overlayPauseBtn) state.slideshow.overlayPauseBtn.hidden = !state.slideshow.isPlaying;
  if (state.slideshow.overlayPlayBtn) state.slideshow.overlayPlayBtn.hidden = state.slideshow.isPlaying;
}

function ensureSlideshowOverlay() {
  if (state.slideshow.overlayRoot) return;
  const root = document.createElement('div');
  root.className = 'gallery-slideshow-overlay';
  root.setAttribute('hidden', 'true');
  root.setAttribute('aria-live', 'polite');

  const img = document.createElement('img');
  img.className = 'gallery-slideshow-image';
  img.alt = '';

  const controls = document.createElement('div');
  controls.className = 'gallery-slideshow-controls';

  const pauseBtn = document.createElement('button');
  pauseBtn.type = 'button';
  pauseBtn.className = 'button ss-overlay-pause';
  pauseBtn.textContent = 'Pause';
  pauseBtn.addEventListener('click', (e) => { e.stopPropagation(); pauseSlideshow(); });

  const playBtn = document.createElement('button');
  playBtn.type = 'button';
  playBtn.className = 'button ss-overlay-play';
  playBtn.textContent = 'Play';
  playBtn.hidden = true;
  playBtn.addEventListener('click', (e) => { e.stopPropagation(); startSlideshow({ resume: true }); });

  const closeBtn = document.createElement('button');
  closeBtn.type = 'button';
  closeBtn.className = 'button ss-overlay-close';
  closeBtn.setAttribute('aria-label', 'Close slideshow');
  closeBtn.textContent = '×';
  closeBtn.addEventListener('click', (e) => { e.stopPropagation(); stopSlideshow(); });

  controls.appendChild(pauseBtn);
  controls.appendChild(playBtn);
  controls.appendChild(closeBtn);

  img.addEventListener('click', (e) => {
    e.stopPropagation();
    const record = getCurrentSlideRecord();
    if (record) {
      state.slideshow.overlayHiddenForModal = true;
      pauseSlideshow();
      hideSlideshowOverlay();
      openModal(record);
    }
  });

  root.appendChild(img);
  root.appendChild(controls);
  document.body.appendChild(root);

  state.slideshow.overlayRoot = root;
  state.slideshow.overlayImage = img;
  state.slideshow.overlayPauseBtn = pauseBtn;
  state.slideshow.overlayPlayBtn = playBtn;
  state.slideshow.overlayCloseBtn = closeBtn;
}

function showSlideshowOverlay() {
  state.slideshow.overlayRoot?.removeAttribute('hidden');
  attachSlideshowKeybindings();
}

function hideSlideshowOverlay() {
  state.slideshow.overlayRoot?.setAttribute('hidden', 'true');
  detachSlideshowKeybindings();
}

function removeSlideshowOverlay() {
  const root = state.slideshow.overlayRoot;
  detachSlideshowKeybindings();
  if (root && root.parentNode) {
    try { root.parentNode.removeChild(root); } catch {}
  }
  state.slideshow.overlayRoot = null;
  state.slideshow.overlayImage = null;
  state.slideshow.overlayPauseBtn = null;
  state.slideshow.overlayPlayBtn = null;
  state.slideshow.overlayCloseBtn = null;
  state.slideshow.overlayHiddenForModal = false;
}

function getCurrentSlideRecord() {
  const i = state.slideshow.index;
  if (i == null || i < 0 || i >= state.filteredItems.length) return null;
  return state.filteredItems[i];
}

function updateOverlayImage() {
  const record = getCurrentSlideRecord();
  const img = state.slideshow.overlayImage;
  if (!record || !img) return;
  const src = ensureRelativeAsset(record.src || record.original || record.thumbnail || '');
  img.src = src;
  img.alt = record.alt || record.title || '';
}

function restartSlideshowTimer() {
  if (!state.slideshow.isPlaying) return;
  if (state.slideshow.timer) clearTimeout(state.slideshow.timer);
  scheduleNextAdvance();
}

function nextSlide() {
  if (!state.filteredItems.length) return;
  const next = state.slideshow.index + 1;
  if (next >= state.filteredItems.length) {
    if (state.slideshow.loop) {
      setActiveSlideIndex(0);
    } else {
      setActiveSlideIndex(state.filteredItems.length - 1);
      return;
    }
  } else {
    setActiveSlideIndex(next);
  }
}

function prevSlide() {
  if (!state.filteredItems.length) return;
  const prev = state.slideshow.index - 1;
  if (prev < 0) {
    if (state.slideshow.loop) {
      setActiveSlideIndex(state.filteredItems.length - 1);
    } else {
      setActiveSlideIndex(0);
      return;
    }
  } else {
    setActiveSlideIndex(prev);
  }
}

function togglePlayPause() {
  if (state.slideshow.isPlaying) {
    pauseSlideshow();
  } else {
    startSlideshow({ resume: true });
  }
}

function attachSlideshowKeybindings() {
  detachSlideshowKeybindings();
  const handler = (e) => {
    const active = document.activeElement;
    const tag = active && active.tagName ? active.tagName.toLowerCase() : '';
    if (tag === 'input' || tag === 'textarea' || tag === 'select' || active?.isContentEditable) return;
    if (!state.slideshow.overlayRoot || state.slideshow.overlayRoot.hasAttribute('hidden')) return;
    switch (e.key) {
      case 'Escape':
        e.preventDefault();
        stopSlideshow();
        break;
      case ' ': // Space
      case 'Spacebar':
      case 'k':
      case 'K':
        e.preventDefault();
        togglePlayPause();
        break;
      case 'ArrowRight':
      case 'l':
      case 'L':
        e.preventDefault();
        nextSlide();
        restartSlideshowTimer();
        break;
      case 'ArrowLeft':
      case 'h':
      case 'H':
        e.preventDefault();
        prevSlide();
        restartSlideshowTimer();
        break;
    }
  };
  window.addEventListener('keydown', handler);
  state.slideshow.handleKey = handler;
}

function detachSlideshowKeybindings() {
  if (state.slideshow.handleKey) {
    window.removeEventListener('keydown', state.slideshow.handleKey);
    state.slideshow.handleKey = null;
  }
}

function setupObserver() {
  if (!state.sentinel) return;
  state.observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        renderNextChunk();
        updateCount();
      }
    });
  });
  state.observer.observe(state.sentinel);
}

function destroyObserver() {
  if (state.observer) {
    state.observer.disconnect();
    state.observer = null;
  }
}

function returnToCollections(options = {}) {
  const { replace = false, skipRouteUpdate = false } = options;
  const main = document.getElementById("main");
  if (!main) return;

  stopSlideshow();
  state.collectionRequestToken += 1;
  state.currentCollection = null;
  state.items = [];
  state.filteredItems = [];
  state.renderedCount = 0;
  state.dom = {};
  state.sentinel = null;
  state.activeImageId = null;
  destroyObserver();

  if (state.modal) {
    closeModal({ skipRoute: true });
  }

  renderCollectionList(main, state.collections);

  if (!skipRouteUpdate) {
    updateRoute({ collectionId: null, imageId: null }, { replace });
  }
}

function normalizeRoute(route = {}) {
  const collectionId =
    typeof route.collectionId === "string" && route.collectionId.trim()
      ? route.collectionId.trim()
      : null;
  const imageId =
    typeof route.imageId === "string" && route.imageId.trim() ? route.imageId.trim() : null;
  return { collectionId, imageId };
}

function getRouteFromLocation() {
  try {
    const url = new URL(window.location.href);
    return normalizeRoute({
      collectionId: url.searchParams.get(ROUTE_KEYS.collection),
      imageId: url.searchParams.get(ROUTE_KEYS.image),
    });
  } catch {
    return normalizeRoute();
  }
}

function routesEqual(a, b) {
  return a.collectionId === b.collectionId && a.imageId === b.imageId;
}

function updateRoute(route, options = {}) {
  if (typeof window === "undefined" || !window.history || !window.history.pushState) return;
  const { replace = false } = options;
  const nextRoute = normalizeRoute(route);
  const currentRoute = getRouteFromLocation();
  if (routesEqual(currentRoute, nextRoute)) return;

  const url = new URL(window.location.href);
  if (nextRoute.collectionId) {
    url.searchParams.set(ROUTE_KEYS.collection, nextRoute.collectionId);
  } else {
    url.searchParams.delete(ROUTE_KEYS.collection);
  }
  if (nextRoute.imageId) {
    url.searchParams.set(ROUTE_KEYS.image, nextRoute.imageId);
  } else {
    url.searchParams.delete(ROUTE_KEYS.image);
  }

  const target = `${url.pathname}${url.search}${url.hash}`;
  const method = replace ? "replaceState" : "pushState";
  window.history[method]({ gallery: true, route: nextRoute }, "", target);
}

async function syncRouteFromLocation(options = {}) {
  if (isSyncingRoute) return;
  if (!state.collections.length) return;
  const { initialLoad = false } = options;
  isSyncingRoute = true;
  try {
    const route = getRouteFromLocation();
    const main = document.getElementById("main");
    if (!main) return;

    if (!route.collectionId) {
      if (state.currentCollection) {
        returnToCollections({ skipRouteUpdate: true, replace: true });
      } else if (state.modal) {
        closeModal({ skipRoute: true });
      }
      return;
    }

    const collection = state.collections.find((item) => item.id === route.collectionId);
    if (!collection) {
      console.warn(`[gallery] unknown collection "${route.collectionId}" in URL`);
      returnToCollections({ skipRouteUpdate: true, replace: true });
      if (!initialLoad) {
        updateRoute({ collectionId: null, imageId: null }, { replace: true });
      }
      return;
    }

    if (!state.currentCollection || state.currentCollection.id !== collection.id) {
      await openCollection(collection, { skipRouteUpdate: true, imageId: route.imageId });
      return;
    }

    if (route.imageId) {
      if (state.activeImageId !== route.imageId) {
        const record =
          state.items.find((item) => item.id === route.imageId) ||
          state.filteredItems.find((item) => item.id === route.imageId);
        if (record) {
          openModal(record, { skipRouteUpdate: true });
        } else if (state.modal && state.activeImageId !== null) {
          closeModal({ skipRoute: true });
        }
      }
    } else if (state.modal && state.activeImageId !== null) {
      closeModal({ skipRoute: true });
    }
  } finally {
    isSyncingRoute = false;
  }
}

async function fetchCollectionRecords(collection) {
  const dataPath = collection.data_path?.replace(/^\.\//, "") || `${collection.id}.jsonl`;
  const sources = COLLECTION_ROOTS.length
    ? COLLECTION_ROOTS.map((root) => `${root}${dataPath}`)
    : [`../data/gallery/${dataPath}`, `/site/data/gallery/${dataPath}`];
  const text = await fetchFirstText(sources);
  return text
    .split(/\r?\n/)
    .map((line) => line.trim())
    .filter(Boolean)
    .map((line) => {
      try {
        return JSON.parse(line);
      } catch (error) {
        console.warn("[gallery] failed to parse record", error);
        return null;
      }
    })
    .filter(Boolean);
}

function renderLoading(container, message) {
  container.innerHTML = `
    <section class="loading-state" aria-live="polite">
      <p>${escapeHtml(message)}</p>
    </section>
  `;
}

function renderError(container, message) {
  container.innerHTML = `
    <section class="gallery-empty" role="alert">
      <p>${escapeHtml(message)}</p>
      <p>Please refresh the page or contact the site owner if the issue persists.</p>
    </section>
  `;
}

async function fetchFirstJson(urls) {
  return fetchFirst(urls, async (response) => response.json());
}

async function fetchFirstText(urls) {
  return fetchFirst(urls, async (response) => response.text());
}

async function fetchFirst(urls, parser) {
  for (const url of urls) {
    try {
      const response = await fetch(url, { cache: "no-store" });
      if (!response.ok) continue;
      return await parser(response);
    } catch (error) {
      console.warn("[gallery] fetch failed for", url, error);
    }
  }
  throw new Error("No sources responded");
}

function normalizeCollection(collection) {
  return {
    id: collection.id,
    title: collection.title || collection.id,
    summary: collection.summary || "",
    description: collection.description || "",
    tags: Array.isArray(collection.tags) ? collection.tags : [],
    sort_order: Number(collection.sort_order || 0),
    image_count: Number(collection.image_count || 0),
    data_path: collection.data_path,
    cover: collection.cover || null,
    created_at: collection.created_at || null,
    updated_at: collection.updated_at || null,
  };
}

function normalizeRecord(record) {
  const title = record.title || record.alt || record.id;
  const caption = record.caption || record.description || "";
  const tags = Array.isArray(record.tags) ? record.tags : [];
  const captured = record.captured_at ? Date.parse(record.captured_at) : null;
  const created = record.created_at ? Date.parse(record.created_at) : null;
  const sortDate = captured || created || 0;
  const searchText = [
    title,
    caption,
    record.description,
    ...(record.tags || []),
    record.captured_at,
    record.created_at,
  ]
    .filter(Boolean)
    .join(" ")
    .toLowerCase();

  return {
    ...record,
    title,
    caption,
    tags,
    thumbnail: record.thumbnail || record.src || record.original,
    src: record.src || record.web || record.original,
    original: record.original || record.download,
    download: record.download || record.original || record.src,
    sortDate,
    searchText,
  };
}

function renderSiteChrome(siteConfig) {
  const header = document.getElementById("site-header");
  const nav = document.getElementById("site-nav");
  const footer = document.getElementById("site-footer");

  const site = siteConfig?.site ?? {};
  const navigation = Array.isArray(siteConfig?.navigation) ? siteConfig.navigation : [];
  const footerConfig = siteConfig?.footer ?? {};

  if (header) {
    const tagline = site.tagline || "SmileCMS";
    const title = site.title || "SmileCMS";
    header.innerHTML = `
      <div class="site-brand">
        <span class="pill">${escapeHtml(tagline)}</span>
        <h1 class="headline-2">${escapeHtml(title)}</h1>
      </div>
    `;
  }

  if (nav) {
    nav.innerHTML = "";
    const currentPath = window.location.pathname.replace(/index\.html$/, "");

    const toggle = document.createElement("button");
    toggle.type = "button";
    toggle.className = "nav-toggle";
    toggle.setAttribute("aria-expanded", "false");
    toggle.setAttribute("aria-controls", "nav-menu");
    toggle.innerHTML = `
      <span class="nav-toggle__label">Menu</span>
      <span class="nav-toggle__icon" aria-hidden="true"></span>
    `;

    const list = document.createElement("ul");
    list.className = "nav-list";
    list.id = "nav-menu";
    list.setAttribute("role", "menubar");
    list.dataset.open = "false";

    const normalizedCurrent = normalizeNavPath(currentPath);

    navigation.forEach((item) => {
      const href = item.href || "#";
      const label = item.label || "Link";
      const li = document.createElement("li");
      li.setAttribute("role", "none");

      const link = document.createElement("a");
      link.className = "nav-link";
      link.setAttribute("role", "menuitem");
      link.href = href;
      link.textContent = label;

      const normalizedHref = normalizeNavPath(href);
      if (
        normalizedHref === normalizedCurrent ||
        item.active ||
        label.toLowerCase() === "gallery"
      ) {
        link.setAttribute("aria-current", "page");
      }

      li.appendChild(link);
      list.appendChild(li);
    });

    toggle.addEventListener("click", () => {
      const expanded = toggle.getAttribute("aria-expanded") === "true";
      toggle.setAttribute("aria-expanded", String(!expanded));
      list.dataset.open = String(!expanded);
    });

    list.addEventListener("click", (event) => {
      const target = event.target;
      if (target instanceof HTMLElement && target.matches(".nav-link")) {
        toggle.setAttribute("aria-expanded", "false");
        list.dataset.open = "false";
      }
    });

    nav.appendChild(toggle);
    nav.appendChild(list);
  }

  if (footer) {
    renderFooterSection(footer, footerConfig);
  }
}

function renderFooterSection(container, footer = {}) {
  if (!container) {
    return;
  }

  container.innerHTML = "";

  const footerTemplate = document.getElementById("tmpl-site-footer");
  const linkTemplate = document.getElementById("tmpl-footer-link");

  let fragment;
  if (footerTemplate) {
    fragment = (footerTemplate.content || footerTemplate).cloneNode(true);
  } else {
    fragment = document.createDocumentFragment();
    const left = document.createElement("div");
    left.className = "footer-left";
    const copySpan = document.createElement("span");
    copySpan.className = "caption";
    left.appendChild(copySpan);

    const right = document.createElement("div");
    right.className = "footer-right";

    fragment.appendChild(left);
    fragment.appendChild(right);
  }

  const copyTarget =
    typeof fragment.querySelector === "function"
      ? fragment.querySelector("[data-footer-copy]")
      : null;
  const linksTarget =
    typeof fragment.querySelector === "function"
      ? fragment.querySelector("[data-footer-links]")
      : null;

  if (copyTarget) {
    copyTarget.textContent = footer.copy || "";
  } else {
    const fallbackCopy = fragment.querySelector(".footer-left .caption");
    if (fallbackCopy) {
      fallbackCopy.textContent = footer.copy || "";
    }
  }

  const linkContainer =
    linksTarget || fragment.querySelector(".footer-right") || container;

  if (linkContainer && Array.isArray(footer.links)) {
    footer.links.forEach((entry) => {
      const resolved = normalizeFooterEntry(entry);
      let linkFragment = null;
      let anchor = null;

      if (linkTemplate) {
        linkFragment = (linkTemplate.content || linkTemplate).cloneNode(true);
        anchor =
          typeof linkFragment.querySelector === "function"
            ? linkFragment.querySelector("a")
            : null;
      }

      if (!anchor) {
        anchor = document.createElement("a");
        anchor.className = "nav-link";
        linkFragment = anchor;
      }

      anchor.textContent = resolved.label;
      anchor.href = resolved.href;
      if (resolved.target) {
        anchor.target = resolved.target;
      }
      if (resolved.rel) {
        anchor.rel = resolved.rel;
      }

      if (linkFragment instanceof HTMLElement) {
        linkContainer.appendChild(linkFragment);
      } else if (linkFragment) {
        linkContainer.appendChild(linkFragment);
      } else {
        linkContainer.appendChild(anchor);
      }
    });
  }

  container.appendChild(fragment);
}

function normalizeFooterEntry(entry = {}) {
  const label = entry.label || "Link";
  const href = entry.href || "#";
  const isExternal = entry.external ?? /^https?:\/\//i.test(href);
  const target = entry.target || (isExternal ? "_blank" : undefined);
  const rel =
    entry.rel || (target === "_blank" ? "noreferrer noopener" : undefined);

  return {
    label,
    href,
    target,
    rel,
  };
}

function openModal(record, options = {}) {
  const { skipRouteUpdate = false } = options;
  // Pause slideshow while viewing details
  pauseSlideshow();
  if (!state.modal) {
    state.modal = createModal();
    document.body.appendChild(state.modal.root);
  }

  const { root, dialog, titleEl, imageEl, captionEl, tagsEl, metaEl, downloadLink, openLink } =
    state.modal;

  titleEl.textContent = record.title;
  captionEl.textContent = record.description || record.caption || "No description available.";
  tagsEl.innerHTML = record.tags.length
    ? record.tags.map((tag) => `<span class="pill pill--light">#${escapeHtml(tag)}</span>`).join("")
    : "<span class=\"pill pill--light\">No tags</span>";

  metaEl.innerHTML = `
    <dl>
      ${record.captured_at ? `<div><dt>Captured</dt><dd>${formatDate(record.captured_at)}</dd></div>` : ""}
      ${record.width && record.height ? `<div><dt>Dimensions</dt><dd>${record.width} x ${record.height}</dd></div>` : ""}
      ${record.llm_revision ? `<div><dt>LLM Revision</dt><dd>${record.llm_revision}</dd></div>` : ""}
      ${record.checksum ? `<div><dt>Checksum</dt><dd><code>${record.checksum.slice(0, 12)}...</code></dd></div>` : ""}
    </dl>
  `;

  if (record.src) {
    imageEl.src = ensureRelativeAsset(record.src);
    imageEl.alt = record.alt || record.title;
  }

  const downloadHref = resolveDownloadAsset(record);
  if (downloadHref) {
    downloadLink.href = downloadHref;
    downloadLink.removeAttribute("aria-disabled");
  } else {
    downloadLink.removeAttribute("href");
    downloadLink.setAttribute("aria-disabled", "true");
  }
  const fallbackName = (() => {
    const source = record.download || record.original || record.src || "";
    const parts = source.split("/");
    return parts[parts.length - 1] || `${record.id}.jpg`;
  })();
  downloadLink.download = record.filename || fallbackName;

  const { href: originalHref, fallback: originalFallback } = resolveOriginalAsset(record);
  if (originalHref) {
    openLink.href = originalHref;
    openLink.removeAttribute("aria-disabled");
    if (originalFallback) {
      openLink.dataset.assetQuality = "derived";
      openLink.title = "Original file unavailable; opening generated image instead.";
    } else {
      openLink.dataset.assetQuality = "original";
      openLink.title = "Open original media in a new tab.";
    }
  } else {
    openLink.removeAttribute("href");
    openLink.setAttribute("aria-disabled", "true");
    openLink.dataset.assetQuality = "unavailable";
    openLink.title = "Original media is not available.";
  }

  root.classList.add("is-open");
  root.removeAttribute("hidden");
  dialog.scrollTop = 0;
  state.lastFocus = document.activeElement;
  dialog.focus({ preventScroll: true });
  state.activeImageId = record.id;

  const handleKey = (event) => {
    if (event.key === "Escape") {
      closeModal();
    }
  };

  root.addEventListener("keydown", handleKey, { once: false });
  state.modal.handleKey = handleKey;

  if (!skipRouteUpdate) {
    updateRoute({ collectionId: state.currentCollection?.id || null, imageId: record.id });
  }
}

function closeModal(options) {
  let skipRouteUpdate = false;
  if (options instanceof Event) {
    options.preventDefault?.();
  } else if (options && typeof options === "object") {
    skipRouteUpdate = Boolean(options.skipRoute);
  }
  if (!state.modal) return;
  const { root, handleKey, closeButton } = state.modal;
  root.classList.remove("is-open");
  root.setAttribute("hidden", "true");
  if (handleKey) {
    root.removeEventListener("keydown", handleKey);
    state.modal.handleKey = null;
  }
  if (state.lastFocus instanceof HTMLElement) {
    state.lastFocus.focus();
  } else {
    closeButton.focus();
  }
  state.activeImageId = null;
  if (!skipRouteUpdate) {
    updateRoute({ collectionId: state.currentCollection?.id || null, imageId: null }, { replace: true });
  }
  // restore overlay if it was hidden for modal
  if (state.slideshow.overlayRoot && state.slideshow.overlayHiddenForModal) {
    showSlideshowOverlay();
    state.slideshow.overlayHiddenForModal = false;
  }
}

function createModal() {
  const root = document.createElement("div");
  root.className = "gallery-modal";
  root.setAttribute("role", "dialog");
  root.setAttribute("aria-modal", "true");
  root.setAttribute("hidden", "true");

  const overlay = document.createElement("div");
  overlay.className = "gallery-modal__overlay";

  const dialog = document.createElement("div");
  dialog.className = "gallery-modal__dialog";
  dialog.tabIndex = -1;

  const panel = document.createElement("div");
  panel.className = "gallery-modal__panel";

  const header = document.createElement("header");
  header.className = "gallery-modal__header";

  const titleEl = document.createElement("h2");
  titleEl.className = "headline-4";

  const closeButton = document.createElement("button");
  closeButton.type = "button";
  closeButton.className = "gallery-modal__close";
  closeButton.setAttribute("aria-label", "Close media details");
  closeButton.innerHTML = "x";
  closeButton.addEventListener("click", closeModal);

  header.appendChild(titleEl);
  header.appendChild(closeButton);

  const content = document.createElement("div");
  content.className = "gallery-modal__content";

  const imageWrap = document.createElement("div");
  imageWrap.className = "gallery-modal__image";
  const imageEl = document.createElement("img");
  imageEl.alt = "";
  imageWrap.appendChild(imageEl);

  const details = document.createElement("div");
  details.className = "gallery-modal__details";
  const captionEl = document.createElement("p");
  captionEl.className = "body-2";

  const tagsEl = document.createElement("div");
  tagsEl.className = "gallery-tag-list";

  const metaEl = document.createElement("div");
  const actions = document.createElement("div");
  actions.className = "gallery-modal__actions";

  const downloadLink = document.createElement("a");
  downloadLink.className = "button button--primary";
  downloadLink.textContent = "Download";

  const openLink = document.createElement("a");
  openLink.className = "button button--secondary";
  openLink.target = "_blank";
  openLink.rel = "noreferrer noopener";
  openLink.textContent = "Open original";

  actions.appendChild(downloadLink);
  actions.appendChild(openLink);

  details.appendChild(captionEl);
  details.appendChild(tagsEl);
  details.appendChild(metaEl);
  details.appendChild(actions);

  content.appendChild(imageWrap);
  content.appendChild(details);

  panel.appendChild(header);
  panel.appendChild(content);
  dialog.appendChild(panel);
  root.appendChild(overlay);
  root.appendChild(dialog);

  root.addEventListener("click", (event) => {
    if (event.target === root || event.target === overlay) {
      closeModal();
    }
  });

  return {
    root,
    overlay,
    dialog,
    titleEl,
    imageEl,
    captionEl,
    tagsEl,
    metaEl,
    downloadLink,
    openLink,
    closeButton,
    handleKey: null,
  };
}

function debounce(fn, delay) {
  let timer;
  return (...args) => {
    clearTimeout(timer);
    timer = setTimeout(() => fn(...args), delay);
  };
}

function resolveDownloadAsset(record) {
  return (
    normalizeAssetCandidate(record.download, { skipGallery: true }) ||
    normalizeAssetCandidate(record.src, { skipGallery: true }) ||
    normalizeAssetCandidate(record.original, { skipGallery: true }) ||
    ""
  );
}

function resolveOriginalAsset(record) {
  const candidates = [
    { value: record.original_url, skipGallery: false, fallback: false },
    { value: record.original, skipGallery: true, fallback: false },
    { value: record.download, skipGallery: false, fallback: true },
    { value: record.src, skipGallery: false, fallback: true },
  ];

  for (const candidate of candidates) {
    const href = normalizeAssetCandidate(candidate.value, { skipGallery: candidate.skipGallery });
    if (href) {
      return { href, fallback: candidate.fallback };
    }
  }

  return { href: "", fallback: true };
}

function normalizeAssetCandidate(value, { skipGallery = false } = {}) {
  if (typeof value !== "string") return "";
  const trimmed = value.trim();
  if (!trimmed) return "";
  if (skipGallery && /^gallery\//.test(trimmed)) {
    return "";
  }
  return ensureRelativeAsset(trimmed);
}

function ensureRelativeAsset(path) {
  if (!path) return "";
  if (path.startsWith("http")) return path;
  if (path.startsWith("/")) return path;
  if (path.startsWith("../")) return path;
  return `../${path.replace(/^\.\//, "")}`;
}

function normalizeNavPath(path) {
  if (typeof path !== "string" || !path) return "/";
  const trimmed = path.replace(/index\.html$/, "");
  if (!trimmed || trimmed === ".") return "/";
  return trimmed.endsWith("/") ? trimmed : `${trimmed}/`;
}

function escapeHtml(value) {
  return String(value ?? "")
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/"/g, "&quot;")
    .replace(/'/g, "&#039;");
}

function formatDate(value) {
  if (!value) return "";
  try {
    const date = new Date(value);
    return new Intl.DateTimeFormat("en", {
      year: "numeric",
      month: "short",
      day: "numeric",
    }).format(date);
  } catch {
    return value;
  }
}
